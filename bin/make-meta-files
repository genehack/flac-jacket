#! /usr/bin/ruby -w
# PODNAME: fuck off already

# $Id$
# $URL$

def prompt_and_chomp (prompt) 
  print prompt
  response = gets
  response.chomp!
end

subdirs = %w{ ./meta ./art }

subdirs.each do |dir|
  Dir.mkdir( dir ) unless File.exist?( dir )
end

album  = prompt_and_chomp( "Album name? " )
artist = prompt_and_chomp( "Artist? " )
genre  = prompt_and_chomp( "Genre? " )
year   = prompt_and_chomp( "Year? " )
disks  = prompt_and_chomp( "Number of disks? " )

1.upto(disks.to_i) do |disk|

  tracks = prompt_and_chomp( "Number of tracks for disk #{disk}? " )

  1.upto(tracks.to_i) do |track|

    track = sprintf '%02d' , track

    # yes, this is horrible. originally, i generated a hash and then
    # used yaml.rb to produce the YAML via hash.to_yaml(). however,
    # you can't make yaml.rb sort the keys in the YAML it outputs (see
    # <http://rubyforge.org/tracker/?group_id=426&atid=1698&func=detail&aid=19082>,
    # and since the whole point is to turn around and have a human
    # edit this file, it's nice to have things in a consistent
    # order. so we fudge with this kerfackta mess. <sigh>

    File.open( "./meta/#{disk}-#{track}-meta.yml" , 'w' ) do |file|
      file.puts <<YAML
---
album: #{album}
artist:
YAML
      artist.split(/\s*\|\s*/).each { |a| file.puts "  - #{a}" }

      file.puts "disk: #{disk}" if disks.to_i > 1

      file.puts <<YAML
genre:
  - Unclassified
YAML

      genre.split(/\s*\|\s*/).each { |g| file.puts "  - #{g}" if g != 'Unclassified' }

      file.puts <<YAML
numTracks: #{tracks}
title: TITLE FOR DISK #{disk} TRACK #{track}
track: #{track}
year: #{year}
YAML

    end
      
    puts "Wrote file for track #{track}/#{tracks}";
  end
end


